"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mnemonic = void 0;
const crypto = __importStar(require("crypto"));
const wordlist_en_1 = __importDefault(require("./wordlist.en"));
class Mnemonic {
    constructor(entropy, wordList = wordlist_en_1.default) {
        if (entropy.length % 4 !== 0) {
            throw new Error("invalid entropy length - it must be multiples of 4");
        }
        if (wordList.length !== 2048) {
            throw new Error("wordList must contain exactly 2048 words");
        }
        this._entropy = entropy;
        this._wordList = wordList;
    }
    // exists for backward-compatibility
    static generate(entropy, wordList = wordlist_en_1.default) {
        return new Mnemonic(entropy, wordList);
    }
    static parse(phrase, wordList = wordlist_en_1.default) {
        const words = phrase.split(" ");
        if (words.length % 3 !== 0) {
            return null;
        }
        const bitArrays = [];
        for (const word of words) {
            const idx = wordList.indexOf(word);
            if (idx === -1) {
                return null;
            }
            bitArrays.push(uint11ToBitArray(idx));
        }
        const bits = flatten(bitArrays);
        const cs = bits.length / 33;
        if (cs !== Math.floor(cs)) {
            return null;
        }
        const checksum = bits.slice(-cs);
        bits.splice(-cs, cs);
        const entropy = [];
        for (let i = 0; i < bits.length / 8; i++) {
            entropy.push(eightBitsToInt(bits.slice(i * 8, (i + 1) * 8)));
        }
        const entropyBuf = Buffer.from(entropy);
        const shasum = crypto.createHash("sha256").update(entropyBuf).digest();
        const checksumFromSha = flatten(Array.from(shasum).map(uint8ToBitArray)).slice(0, cs);
        if (!arraysEqual(checksumFromSha, checksum)) {
            return null;
        }
        return new Mnemonic(entropyBuf, wordList);
    }
    get entropy() {
        return this._entropy;
    }
    get words() {
        if (!this._words) {
            const ent = this.entropy.length * 8;
            const cs = ent / 32;
            const bits = flatten(Array.from(this.entropy).map(uint8ToBitArray));
            const shasum = crypto.createHash("sha256").update(this.entropy).digest();
            const checksum = flatten(Array.from(shasum).map(uint8ToBitArray)).slice(0, cs);
            bits.push(...checksum);
            const words = [];
            for (let i = 0; i < bits.length / 11; i++) {
                const idx = elevenBitsToInt(bits.slice(i * 11, (i + 1) * 11));
                words.push(this._wordList[idx]);
            }
            this._words = words;
        }
        return this._words;
    }
    get phrase() {
        if (!this._phrase) {
            this._phrase = this.words.join(" ");
        }
        return this._phrase;
    }
    toSeed(passphrase = "") {
        const salt = `mnemonic${passphrase}`;
        return Mnemonic.pbkdf2Sync(this.phrase, salt, 2048, 64, "sha512");
    }
    toSeedAsync(passphrase = "") {
        const salt = `mnemonic${passphrase}`;
        return new Promise((resolve, reject) => {
            Mnemonic.pbkdf2(this.phrase, salt, 2048, 64, "sha512", (err, key) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(key);
            });
        });
    }
}
exports.Mnemonic = Mnemonic;
Mnemonic.pbkdf2Sync = crypto.pbkdf2Sync;
Mnemonic.pbkdf2 = crypto.pbkdf2;
function flatten(input) {
    const arr = [];
    return arr.concat(...input);
}
function uint11ToBitArray(n) {
    return [
        Math.min(n & 1024, 1),
        Math.min(n & 512, 1),
        Math.min(n & 256, 1),
        Math.min(n & 128, 1),
        Math.min(n & 64, 1),
        Math.min(n & 32, 1),
        Math.min(n & 16, 1),
        Math.min(n & 8, 1),
        Math.min(n & 4, 1),
        Math.min(n & 2, 1),
        Math.min(n & 1, 1),
    ];
}
function uint8ToBitArray(n) {
    return [
        Math.min(n & 128, 1),
        Math.min(n & 64, 1),
        Math.min(n & 32, 1),
        Math.min(n & 16, 1),
        Math.min(n & 8, 1),
        Math.min(n & 4, 1),
        Math.min(n & 2, 1),
        Math.min(n & 1, 1),
    ];
}
function elevenBitsToInt(bits) {
    return (bits[0] * 1024 +
        bits[1] * 512 +
        bits[2] * 256 +
        bits[3] * 128 +
        bits[4] * 64 +
        bits[5] * 32 +
        bits[6] * 16 +
        bits[7] * 8 +
        bits[8] * 4 +
        bits[9] * 2 +
        bits[10]);
}
function eightBitsToInt(bits) {
    return (bits[0] * 128 +
        bits[1] * 64 +
        bits[2] * 32 +
        bits[3] * 16 +
        bits[4] * 8 +
        bits[5] * 4 +
        bits[6] * 2 +
        bits[7]);
}
function arraysEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (a.length !== b.length) {
        return false;
    }
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=index.js.map