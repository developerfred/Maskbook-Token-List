/// <reference types="node" />
import { VersionBytes } from "../versions";
export declare enum Algorithm {
    secp256k1 = "secp256k1",
    ed25519 = "ed25519"
}
export interface HDKeyConstructorOptions {
    algorithm?: Algorithm;
    chainCode: Buffer;
    privateKey?: Buffer | null;
    publicKey?: Buffer | null;
    index?: number;
    depth?: number;
    parentFingerprint?: Buffer;
    version?: VersionBytes;
}
export declare class HDKey {
    private readonly _algorithm;
    private readonly _privateKey;
    private readonly _publicKey;
    private readonly _chainCode;
    private readonly _index;
    private readonly _depth;
    private readonly _parentFingerprint;
    private readonly _version;
    private readonly _keyIdentifier;
    constructor({ algorithm, privateKey, publicKey, chainCode, index, depth, parentFingerprint, version, }: HDKeyConstructorOptions);
    static parseMasterSeed(seed: Buffer, version?: VersionBytes): HDKey;
    static parseEd25519Seed(seed: Buffer, version?: VersionBytes): HDKey;
    private static parseSeedWithKey;
    static parseExtendedKey(key: string, version?: VersionBytes): HDKey;
    get algorithm(): Algorithm;
    get privateKey(): Buffer | null;
    get publicKey(): Buffer;
    get chainCode(): Buffer;
    get depth(): number;
    get parentFingerprint(): Buffer;
    get index(): number;
    get keyIdentifier(): Buffer;
    get fingerprint(): Buffer;
    get version(): VersionBytes;
    get extendedPrivateKey(): string | null;
    get extendedPublicKey(): string;
    derive(chain: string): HDKey;
    private deriveChildKey;
    private serialize;
}
